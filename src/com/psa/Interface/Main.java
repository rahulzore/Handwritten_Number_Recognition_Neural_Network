/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.psa.Interface;

import com.psa.Business.NeuralNetwork.NeuralNetwork;
import com.psa.Business.NeuralNetwork.Utils;
import com.psa.Business.TrainingUtils.TrainingUtils;
import com.psa.Business.mnistUtils.MnistImageFile;
import com.psa.Business.mnistUtils.MnistLabelFile;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author rahulzore
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private BufferedImage tempImg;
    private Graphics2D tempImgG;
    private final static int TRAINNING_IMG_WIDTH = 28;
    private final static int TRAINNING_IMG_HEIGHT = 28;
    private TrainingUtils set = null;
    private TrainingUtils testSet = null;
    private NeuralNetwork network = null;
    
    
    public Main() {
        initComponents();
        tempImg = new BufferedImage(TRAINNING_IMG_WIDTH, TRAINNING_IMG_HEIGHT, BufferedImage.TYPE_INT_ARGB);
        tempImgG = tempImg.createGraphics();
        this.network = new NeuralNetwork(784, 70, 35, 10);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        drawingPanel = new com.psa.Interface.DrawingPanel();
        predictBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        resultLbl = new javax.swing.JLabel();
        createDataBtn = new javax.swing.JButton();
        trainBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        testMnistBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        zeroLbl = new javax.swing.JLabel();
        oneLbl = new javax.swing.JLabel();
        twoLbl = new javax.swing.JLabel();
        threeLbl = new javax.swing.JLabel();
        fourLbl = new javax.swing.JLabel();
        fiveLbl = new javax.swing.JLabel();
        sixLbl = new javax.swing.JLabel();
        sevenLbl = new javax.swing.JLabel();
        eightLbl = new javax.swing.JLabel();
        nineLbl = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Neural Network | Rahul Zore | Sanchit Chavan");

        drawingPanel.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        predictBtn.setText("Predict");
        predictBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        createDataBtn.setText("Load MNIST Dataset");
        createDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDataBtnActionPerformed(evt);
            }
        });

        trainBtn.setText("Train Neural Network");
        trainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save Network to File");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        loadBtn.setText("Load Network from File");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Result:");

        testMnistBtn.setText("Test Network with MNIST test images");
        testMnistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testMnistBtnActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        jLabel2.setText("0 :");

        jLabel3.setText("1 :");

        jLabel4.setText("2 :");

        jLabel5.setText("3 :");

        jLabel6.setText("4 :");

        jLabel7.setText("5 :");

        jLabel8.setText("6 :");

        jLabel9.setText("7 :");

        jLabel10.setText("8 :");

        jLabel11.setText("9 :");

        zeroLbl.setText("0.00%");

        oneLbl.setText("0.00%");

        twoLbl.setText("0.00%");

        threeLbl.setText("0.00%");

        fourLbl.setText("0.00%");

        fiveLbl.setText("0.00%");

        sixLbl.setText("0.00%");

        sevenLbl.setText("0.00%");

        eightLbl.setText("0.00%");

        nineLbl.setText("0.00%");

        jLabel12.setText("Draw your digit here to predict");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(createDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(trainBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(testMnistBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(predictBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(zeroLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(oneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(twoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(threeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(fourLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(fiveLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(sixLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(sevenLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(eightLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(nineLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(126, 126, 126))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(drawingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(predictBtn)
                            .addComponent(clearBtn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resultLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(testMnistBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(createDataBtn)
                        .addGap(18, 18, 18)
                        .addComponent(trainBtn)
                        .addGap(18, 18, 18)
                        .addComponent(saveBtn)
                        .addGap(18, 18, 18)
                        .addComponent(loadBtn)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(zeroLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(oneLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(twoLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(threeLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(fourLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(fiveLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(sixLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(sevenLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(eightLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(nineLbl))
                        .addContainerGap(102, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
         drawingPanel.clearDraw();
         resultLbl.setText("");
         zeroLbl.setText("0.00%");
         oneLbl.setText("0.00%");
         twoLbl.setText("0.00%");
         threeLbl.setText("0.00%");
         fourLbl.setText("0.00%");
         fiveLbl.setText("0.00%");
         sixLbl.setText("0.00%");
         sevenLbl.setText("0.00%");
         eightLbl.setText("0.00%");
         nineLbl.setText("0.00%");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void createDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDataBtnActionPerformed
        // TODO add your handling code here:
        this.set = createTrainSet(0,29999);
        this.testSet = createTestSet(0,4999);
    }//GEN-LAST:event_createDataBtnActionPerformed

    private void trainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainBtnActionPerformed
        // TODO add your handling code here:
        try{
        trainData(this.network, this.set, 100, 50, 100);
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please load the Neural network from MNIST dataset first!!");
        }
    }//GEN-LAST:event_trainBtnActionPerformed

    private void predictBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictBtnActionPerformed
        // TODO add your handling code here:
        try{
        testTrainSet(this.network, this.set, 10);
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please load Neural Network before testing!!");
        }
    }//GEN-LAST:event_predictBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        try {
            // TODO add your handling code here:
            this.network.saveNetwork("resources/perceptron.txt");
            this.set.saveSet("resources/trainingSet.txt");
            this.testSet.saveSet("resources/testSet.txt");
            JOptionPane.showMessageDialog(null, "Neural Network Saved successfully to file network.txt");
            
        } 
        catch(NullPointerException e){
           JOptionPane.showMessageDialog(null, "Please Load the Network and Train it before saving it to file!!"); 
        }
        
        catch (Exception ex) {
            
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        try {
            // TODO add your handling code here:
            this.network = this.network.loadNetwork("resources/perceptron.txt");
            this.set = Utils.loadTrainingSet("resources/trainingSet.txt");
            this.testSet = Utils.loadTestSet("resources/testSet.txt");
            JOptionPane.showMessageDialog(null, "Neural Network Loaded successfully to file network.txt");
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadBtnActionPerformed

    private void testMnistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testMnistBtnActionPerformed
        // TODO add your handling code here:
        try{
        testMnistSet(network, testSet, 10);
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please load the Neural Network before testing!!");
        }
    }//GEN-LAST:event_testMnistBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    private void predict(){
        Image image = getImageFromDrawingPanel();
                
        double[] imgData = drawToTempImageAndGetArray(image);
        
        
    }
    
    private Image getImageFromDrawingPanel() {
        BufferedImage drawingImage = drawingPanel.createImage();
        Image scaledImage = drawingImage.getScaledInstance(TRAINNING_IMG_WIDTH, TRAINNING_IMG_HEIGHT, Image.SCALE_FAST);
        return scaledImage;
    }
    
    private double[] drawToTempImageAndGetArray(Image image) {
        //Clear
        tempImgG.setPaint(Color.WHITE);
        tempImgG.fillRect(0, 0, TRAINNING_IMG_WIDTH, TRAINNING_IMG_HEIGHT);
        
        //Draw image
        tempImgG.drawImage(image, 0, 0, this);
        
        //Get array
        return imageToFloatArray(tempImg);
    }
    
    private double[] imageToFloatArray(BufferedImage image) {
        int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();
        double[] outputPixels = new double[pixels.length];
        int width = image.getWidth();
        int height = image.getHeight();
        boolean hasAlphaChannel = image.getAlphaRaster() != null;
        int pixelLength = 3;
        if (hasAlphaChannel) {
            pixelLength = 4;
        }
        
        for (int i = 0; i < pixels.length; i++) {
            int pixel = pixels[i];
            Color c = new Color(pixel, hasAlphaChannel);
            int intensity = c.getRed() + c.getGreen() + c.getGreen();
            outputPixels[i] = intensity == 0 ? 1 : 0;
        }
        
        return outputPixels;
    }
    
    public static TrainingUtils createTrainSet(int start, int end) {

        TrainingUtils set = new TrainingUtils(28 * 28, 10);

        try {

            String path = new File("").getAbsolutePath();

            MnistImageFile m = new MnistImageFile(path + "/resources/train-images-idx3-ubyte", "rw");
            MnistLabelFile l = new MnistLabelFile(path + "/resources/train-labels-idx1-ubyte", "rw");

            for(int i = start; i <= end; i++) {
                if(i % 100 ==  0){
                    System.out.println("prepared: " + i);
                }

                double[] input = new double[28 * 28];
                double[] output = new double[10];

                output[l.readLabel()] = 1d;
                for(int j = 0; j < 28*28; j++){
                    input[j] = (double)m.read() / (double)256;
                }

                set.addData(input, output);
                m.next();
                l.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
            
         return set;
    }
    
    public static TrainingUtils createTestSet(int start, int end) {

        TrainingUtils set = new TrainingUtils(28 * 28, 10);

        try {

            String path = new File("").getAbsolutePath();

            MnistImageFile m = new MnistImageFile(path + "/resources/t10k-images-idx3-ubyte", "rw");
            MnistLabelFile l = new MnistLabelFile(path + "/resources/t10k-labels-idx1-ubyte", "rw");

            for(int i = start; i <= end; i++) {
                if(i % 100 ==  0){
                    System.out.println("prepared: " + i);
                }

                double[] input = new double[28 * 28];
                double[] output = new double[10];

                output[l.readLabel()] = 1d;
                for(int j = 0; j < 28*28; j++){
                    input[j] = (double)m.read() / (double)256;
                }

                set.addData(input, output);
                m.next();
                l.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        JOptionPane.showMessageDialog(null, "Data Created!!");
         return set;
    }
    

    public static void trainData(NeuralNetwork net,TrainingUtils set, int epochs, int loops, int batch_size) {
        for(int e = 0; e < epochs;e++) {
            net.train(set, loops, batch_size);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>   "+ e+ "   <<<<<<<<<<<<<<<<<<<<<<<<<<");
        }
        JOptionPane.showMessageDialog(null, "Network trained Successfully!!");
    }

    public void testTrainSet(NeuralNetwork net, TrainingUtils set, int printSteps) {
        Image image = getImageFromDrawingPanel();
                
        double[] imgData = drawToTempImageAndGetArray(image);
        
        int correct = 0;
        for(int i = 0; i < set.size(); i++) {

            double highest = Utils.indexOfHighestValue(net.calculateResult(imgData));
            double actualHighest = Utils.indexOfHighestValue(set.getOutput(i));
            if(highest == actualHighest) {
                int res = (int) Math.round(actualHighest);
                Font f  = resultLbl.getFont();
                resultLbl.setFont(f.deriveFont(f.getStyle() | Font.BOLD));
                resultLbl.setText(String.valueOf(res));
                zeroLbl.setText(String.format("%.2f",net.calculateResult(imgData)[0]*100)+"%");
                oneLbl.setText(String.format("%.2f",net.calculateResult(imgData)[1]*100)+"%");
                twoLbl.setText(String.format("%.2f",net.calculateResult(imgData)[2]*100)+"%");
                threeLbl.setText(String.format("%.2f",net.calculateResult(imgData)[3]*100)+"%");
                fourLbl.setText(String.format("%.2f",net.calculateResult(imgData)[4]*100)+"%");
                fiveLbl.setText(String.format("%.2f",net.calculateResult(imgData)[5]*100)+"%");
                sixLbl.setText(String.format("%.2f",net.calculateResult(imgData)[6]*100)+"%");
                sevenLbl.setText(String.format("%.2f",net.calculateResult(imgData)[7]*100)+"%");
                eightLbl.setText(String.format("%.2f",net.calculateResult(imgData)[8]*100)+"%");
                nineLbl.setText(String.format("%.2f",net.calculateResult(imgData)[9]*100)+"%");
                correct ++ ;
                break;
            }
            if(i % printSteps == 0) {
                //System.out.println(i + ": " + (double)correct / (double) (i + 1));
            }
        }
        //System.out.println("Testing finished, RESULT: " + correct + " / " + set.size()+ "  -> " + (double)correct / (double)set.size()*100 +" %");
    }
    
    public void testMnistSet(NeuralNetwork net, TrainingUtils set, int printSteps){
        int correct = 0;
        int[][] cm = net.ConfusionMatrix(net, set, printSteps);
        
        for(int i = 0; i < set.size(); i++) {
            double highest = Utils.indexOfHighestValue(net.calculateResult(set.getInput(i)));
            double actualHighest = Utils.indexOfHighestValue(set.getOutput(i));
            jTextArea.append("\nOutput: "+ highest+" Expected: "+actualHighest);
            if(highest == actualHighest) {
                correct ++ ;
                
            }
            if(i % printSteps == 0) {
                System.out.println(i + ": " + (double)correct / (double) (i + 1));
            }
        }
        jTextArea.append("\n\nTesting finished, \nRESULT: " + correct + " / " + set.size()+ "  \nAccuracy: " + String.format("%.2f",(double)correct / (double)set.size()*100) +" %");
        jTextArea.append("\n\nConfusion Matrix\n");
        net.printConfusionMatrix(cm);
        for(int i=0; i<cm.length; i++) {
			for(int j=0; j<cm[i].length; j++) {
				
				jTextArea.append(cm[i][j] + "   ");
			}
			jTextArea.append("\n");
		}
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton createDataBtn;
    private com.psa.Interface.DrawingPanel drawingPanel;
    private javax.swing.JLabel eightLbl;
    private javax.swing.JLabel fiveLbl;
    private javax.swing.JLabel fourLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JButton loadBtn;
    private javax.swing.JLabel nineLbl;
    private javax.swing.JLabel oneLbl;
    private javax.swing.JButton predictBtn;
    private javax.swing.JLabel resultLbl;
    private javax.swing.JButton saveBtn;
    private javax.swing.JLabel sevenLbl;
    private javax.swing.JLabel sixLbl;
    private javax.swing.JButton testMnistBtn;
    private javax.swing.JLabel threeLbl;
    private javax.swing.JButton trainBtn;
    private javax.swing.JLabel twoLbl;
    private javax.swing.JLabel zeroLbl;
    // End of variables declaration//GEN-END:variables
}
